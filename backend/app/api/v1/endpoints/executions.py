from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from pydantic import BaseModel
from datetime import datetime

from app.core.database import get_db
from app.models.execution import Execution

router = APIRouter()

# Pydantic models for request/response
class ExecutionBase(BaseModel):
    process_id: int
    status: str
    output_path: str | None = None
    console_log: str | None = None

class ExecutionCreate(ExecutionBase):
    pass

class ExecutionUpdate(BaseModel):
    status: str | None = None
    output_path: str | None = None
    console_log: str | None = None
    completed_at: datetime | None = None

class ExecutionResponse(ExecutionBase):
    id: int
    started_at: datetime
    completed_at: datetime | None = None
    
    class Config:
        from_attributes = True

@router.get("/", response_model=List[ExecutionResponse])
def get_executions(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    """Get all executions with pagination"""
    executions = db.query(Execution).offset(skip).limit(limit).all()
    return executions

@router.get("/{execution_id}", response_model=ExecutionResponse)
def get_execution(execution_id: int, db: Session = Depends(get_db)):
    """Get a specific execution by ID"""
    execution = db.query(Execution).filter(Execution.id == execution_id).first()
    if execution is None:
        raise HTTPException(status_code=404, detail="Execution not found")
    return execution

@router.put("/{execution_id}", response_model=ExecutionResponse)
def update_execution(execution_id: int, execution: ExecutionUpdate, db: Session = Depends(get_db)):
    """Update an execution"""
    db_execution = db.query(Execution).filter(Execution.id == execution_id).first()
    if db_execution is None:
        raise HTTPException(status_code=404, detail="Execution not found")
    
    update_data = execution.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(db_execution, field, value)
    
    db.commit()
    db.refresh(db_execution)
    return db_execution

@router.post("/{execution_id}/stop", status_code=status.HTTP_200_OK)
def stop_execution(execution_id: int, db: Session = Depends(get_db)):
    """Stop an execution"""
    execution = db.query(Execution).filter(Execution.id == execution_id).first()
    if execution is None:
        raise HTTPException(status_code=404, detail="Execution not found")
    
    if execution.status not in ['running']:
        raise HTTPException(status_code=400, detail="Execution is not running")
    
    execution.status = 'stopped'
    execution.completed_at = datetime.utcnow()
    db.commit()
    
    return {"message": "Execution stopped", "execution_id": execution_id}

@router.get("/{execution_id}/files")
def get_execution_files(execution_id: int, db: Session = Depends(get_db)):
    """Get files generated by an execution"""
    execution = db.query(Execution).filter(Execution.id == execution_id).first()
    if execution is None:
        raise HTTPException(status_code=404, detail="Execution not found")
    
    # TODO: Implement file listing logic
    # This would scan the output_path directory and return file information
    
    return {"files": [], "execution_id": execution_id}

@router.get("/{execution_id}/files/{filename}")
def download_execution_file(execution_id: int, filename: str, db: Session = Depends(get_db)):
    """Download a specific file from an execution"""
    execution = db.query(Execution).filter(Execution.id == execution_id).first()
    if execution is None:
        raise HTTPException(status_code=404, detail="Execution not found")
    
    # TODO: Implement file download logic
    # This would serve the file from the output_path directory
    
    raise HTTPException(status_code=501, detail="File download not implemented yet") 